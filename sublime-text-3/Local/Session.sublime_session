{
	"folder_history":
	[
	],
	"last_version": 3211,
	"last_window_id": 1,
	"log_indexing": false,
	"settings":
	{
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "select ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\" \nfrom account_invoice ai \ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\ninner join\naccount_move_line aml on aml.move = ai.\"move\"\ninner join\ntreasury_account_payment_request_line_detail taprld on concat('treasury.account.payment.request,', taprld.request) = aml.payment_origin\ninner join \ntreasury_account_payment_request tapr on tapr.id = taprld.request \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \nwhere \nai.\"move\" is not null and\naml.payment_origin  is not null\ngroup by ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date,tapr.\"number\",taps.payment_date\norder  by ai.\"number\" ;\n\n",
					"settings":
					{
						"buffer_size": 813,
						"line_ending": "Unix",
						"name": "select ai.id, ai.number, pp.name, ai.create_date,"
					}
				},
				{
					"contents": "select h.id, count(h.id)\nfrom\n(select ai.id, ai.number as \"a\", pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\"\nfrom account_invoice ai \ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\ninner join\naccount_move_line aml on aml.move = ai.move\ninner join \ntreasury_account_payment_request tapr on concat('treasury.account.payment.request,', tapr.id) = aml.payment_origin\ninner join\ntreasury_account_payment_request_line_detail taprld on taprld.request = tapr.id\ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \nwhere \nai.\"move\" is not null and\naml.payment_origin  is not null and \ntapr.state not in ('draft', 'cancel')\n\nunion \n\nselect ai.id, ai.number as \"a\", pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\" \nfrom treasury_account_payment_request tapr\ninner join\ntreasury_account_payment_request_line_detail taprld on taprld.request = tapr.id \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \ninner join\npurchase_contract_process_payment pcpp on concat('purchase.contract.process.payment,', pcpp.id) = taprld.origin\ninner join\naccount_invoice ai on concat('account.invoice,', ai.id) = pcpp.origin\ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\nwhere \nai.\"move\" is not null and \ntapr.state not in ('draft', 'cancel')\n\nunion \n\nselect ai.id, ai.number as \"a\", pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\" \nfrom treasury_account_payment_request tapr\ninner join\ntreasury_account_payment_request_line_detail taprld on taprld.request = tapr.id \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \ninner join\naccount_move_line aml on concat('account.move.line,', aml.id) = taprld.origin\ninner join\naccount_invoice ai on concat('account.invoice,', ai.id) = aml.origin_\ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\nwhere \nai.\"move\" is not null and \ntapr.state not in ('draft', 'cancel')) as h\n\ngroup by h.id\nhaving count(h.id) > 1\n",
					"settings":
					{
						"buffer_size": 2198,
						"line_ending": "Unix",
						"name": "select h.id, count(h.id)"
					}
				},
				{
					"contents": "select ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\"\nfrom account_invoice ai \ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\ninner join\naccount_move_line aml on aml.move = ai.move\ninner join\ntreasury_account_payment_request_line_detail taprld on concat('treasury.account.payment.request,', taprld.request) = aml.payment_origin\ninner join \ntreasury_account_payment_request tapr on tapr.id = taprld.request \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \nwhere \nai.\"move\" is not null and\naml.payment_origin  is not null and \ntapr.state not in ('draft', 'cancel')\ngroup by ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date,tapr.\"number\",taps.payment_date\n\nunion \n\nselect ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\" \nfrom treasury_account_payment_request tapr\ninner join\ntreasury_account_payment_request_line_detail taprld on taprld.request = tapr.id \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \ninner join\npurchase_contract_process_payment pcpp on concat('purchase.contract.process.payment,', pcpp.id) = taprld.origin\ninner join\naccount_invoice ai on concat('account.invoice,', ai.id) = pcpp.origin\ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\nwhere \nai.\"move\" is not null and \ntapr.state not in ('draft', 'cancel') and \npcpp.state = 'valid'\ngroup by ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date,tapr.\"number\",taps.payment_date\n\nunion \n\nselect ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date, taps.payment_date, tapr.\"number\" \nfrom treasury_account_payment_request tapr\ninner join\ntreasury_account_payment_request_line_detail taprld on taprld.request = tapr.id \ninner join\ntreasury_account_payment_spi taps on taps.id = taprld.spi \ninner join\naccount_move_line aml on concat('account.move.line,', aml.id) = taprld.origin\ninner join\naccount_invoice ai on concat('account.invoice,', ai.id) = aml.origin_\ninner join\naccount_tax_retention atr on atr.invoice = ai.id \ninner join \nparty_party pp on pp.id = ai.party\nwhere \nai.\"move\" is not null and \ntapr.state not in ('draft', 'cancel')\ngroup by ai.id, ai.number, pp.name, ai.create_date, atr.issue_date, tapr.request_date,tapr.\"number\",taps.payment_date\n\n",
					"settings":
					{
						"buffer_size": 2491,
						"line_ending": "Unix",
						"name": "select ai.id, ai.number, pp.name, ai.create_date,"
					}
				},
				{
					"contents": "@classmethod                                                                       10     data = json.dumps(result, cls=JSONEncoder, separators=(',', ':'),ensure_ascii=False)\n def get_shipment_data(cls, reference_invoice, employee):                            9     return data\n pool = Pool()                                                                   8\n Company = pool.get('company.company')                                           7 @app.route('/<database_name>/siim/send_warehouse_parameters/', methods=['POST'])\n Config = pool.get('stock.configuration')                                        6 @with_pool\n Reason = pool.get('stock.shipment.reason')                                      5 @with_transaction()\n from_location = Config(1).get_multivalue('from_location_product_item')          4 @siim_application\n to_location = Config(1).get_multivalue('to_location_product_item')              3 def send_warehouse_parameters(request, pool):\n company = Company(Transaction().context.get('company'))                         2     ShipmentInternal= pool.get('stock.shipment.internal')\n reason, = Reason.search(['id', '=', 2])                                         1     data = json.loads(request.data)\n result = []                                                                   482     result = ShipmentInternal.get_move_data(data['idFacturacion'], data['to_sent'])\n result.append({                                                                 1\n     'from_location': from_location.id,                                          2     data = json.dumps(result, cls=JSONEncoder, separators=(',', ':'), ensure_ascii=False\n     'to_location': to_location.id,                                                )\n     'company': company.id,                                                      3     return data\n     'currency': company.currency.id if company else None,                       4\n     'state': 'draft',                                                           5 @app.route('/<database_name>/siim/create_move_stock/', methods=['POST'])\n     'reference': reference_invoice,                                             6 @with_pool\n     'reazon': reason,                                                           7 @with_transaction()\n     'employee': employee,                                                       8 @siim_application\n     'siim_reference': reference_invoice,                                        9 def create_move_stock(request, pool):\n })                                                                             10     Move= pool.get('stock.move')\n return result ",
					"settings":
					{
						"buffer_size": 2607,
						"line_ending": "Unix",
						"name": "@classmethod"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
			],
			"find":
			{
				"height": 0.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 3,
					"sheets":
					[
						{
							"buffer": 0,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 813,
								"regions":
								{
								},
								"selection":
								[
									[
										545,
										545
									]
								],
								"settings":
								{
									"auto_name": "select ai.id, ai.number, pp.name, ai.create_date,",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2198,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										2198
									]
								],
								"settings":
								{
									"auto_name": "select h.id, count(h.id)",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2491,
								"regions":
								{
								},
								"selection":
								[
									[
										421,
										421
									]
								],
								"settings":
								{
									"auto_name": "select ai.id, ai.number, pp.name, ai.create_date,",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 3,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2607,
								"regions":
								{
								},
								"selection":
								[
									[
										1211,
										1211
									]
								],
								"settings":
								{
									"auto_name": "@classmethod",
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 0.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,970,43,1915,1075,1920,1080",
			"project": "",
			"replace":
			{
				"height": 0.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 150.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 1,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
